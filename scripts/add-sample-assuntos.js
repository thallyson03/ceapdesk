// scripts/add-sample-assuntos.js
const { Sequelize } = require('sequelize');
const config = require('../config/database');

async function addSampleAssuntos() {
    // Usar configura√ß√£o de desenvolvimento por padr√£o
    const dbConfig = config.development;
    
    const sequelize = new Sequelize(dbConfig.database, dbConfig.username, dbConfig.password, {
        host: dbConfig.host,
        port: dbConfig.port,
        dialect: dbConfig.dialect,
        logging: false,
        define: dbConfig.define,
        pool: dbConfig.pool
    });

    try {
        console.log('üîß Adicionando assuntos de exemplo...');

        // Buscar setores existentes
        const [setores] = await sequelize.query(`
            SELECT id, nome FROM "Setors" ORDER BY nome
        `);

        if (setores.length === 0) {
            console.log('‚ùå Nenhum setor encontrado. Crie setores primeiro.');
            return;
        }

        console.log(`üìã Setores encontrados: ${setores.length}`);

        // Assuntos de exemplo por setor
        const assuntosPorSetor = {
            'TI': [
                { nome: 'Problema com impressora', descricao: 'Impressora n√£o est√° funcionando' },
                { nome: 'Computador n√£o liga', descricao: 'Computador n√£o inicia' },
                { nome: 'Internet lenta', descricao: 'Conex√£o com internet muito lenta' },
                { nome: 'Software n√£o abre', descricao: 'Programa n√£o consegue ser executado' },
                { nome: 'Email n√£o funciona', descricao: 'Problemas com acesso ao email' },
                { nome: 'Sistema travado', descricao: 'Sistema operacional travando' },
                { nome: 'Perif√©ricos n√£o funcionam', descricao: 'Mouse, teclado ou outros perif√©ricos' },
                { nome: 'Rede Wi-Fi', descricao: 'Problemas com conex√£o Wi-Fi' }
            ],
            'Administra√ß√£o': [
                { nome: 'Solicita√ß√£o de documentos', descricao: 'Emiss√£o de documentos' },
                { nome: 'Problema com sistema', descricao: 'Sistema administrativo com erro' },
                { nome: 'Acesso negado', descricao: 'Usu√°rio sem acesso ao sistema' },
                { nome: 'Relat√≥rio n√£o gera', descricao: 'Relat√≥rios n√£o est√£o sendo gerados' },
                { nome: 'Dados incorretos', descricao: 'Informa√ß√µes incorretas no sistema' },
                { nome: 'Backup necess√°rio', descricao: 'Solicita√ß√£o de backup de dados' },
                { nome: 'Configura√ß√£o de usu√°rio', descricao: 'Configura√ß√£o de permiss√µes' },
                { nome: 'Manuten√ß√£o preventiva', descricao: 'Agendamento de manuten√ß√£o' }
            ],
            'RH': [
                { nome: 'Folha de pagamento', descricao: 'Problemas com folha de pagamento' },
                { nome: 'Ponto eletr√¥nico', descricao: 'Problemas com registro de ponto' },
                { nome: 'Benef√≠cios', descricao: 'Quest√µes relacionadas a benef√≠cios' },
                { nome: 'F√©rias', descricao: 'Solicita√ß√µes e problemas com f√©rias' },
                { nome: 'Admiss√£o', descricao: 'Processo de admiss√£o de funcion√°rios' },
                { nome: 'Demiss√£o', descricao: 'Processo de demiss√£o' },
                { nome: 'Treinamento', descricao: 'Solicita√ß√µes de treinamento' },
                { nome: 'Avalia√ß√£o de desempenho', descricao: 'Sistema de avalia√ß√£o' }
            ],
            'Financeiro': [
                { nome: 'Contas a pagar', descricao: 'Problemas com contas a pagar' },
                { nome: 'Contas a receber', descricao: 'Quest√µes de recebimento' },
                { nome: 'Relat√≥rios financeiros', descricao: 'Gera√ß√£o de relat√≥rios' },
                { nome: 'Concilia√ß√£o banc√°ria', descricao: 'Problemas com concilia√ß√£o' },
                { nome: 'Or√ßamento', descricao: 'Quest√µes relacionadas ao or√ßamento' },
                { nome: 'Impostos', descricao: 'Declara√ß√µes e impostos' },
                { nome: 'Auditoria', descricao: 'Processos de auditoria' },
                { nome: 'Fluxo de caixa', descricao: 'An√°lise de fluxo de caixa' }
            ],
            'Comercial': [
                { nome: 'Vendas', descricao: 'Problemas com sistema de vendas' },
                { nome: 'Clientes', descricao: 'Gest√£o de clientes' },
                { nome: 'Propostas', descricao: 'Elabora√ß√£o de propostas' },
                { nome: 'Contratos', descricao: 'Gest√£o de contratos' },
                { nome: 'Comiss√µes', descricao: 'C√°lculo de comiss√µes' },
                { nome: 'Metas', descricao: 'Acompanhamento de metas' },
                { nome: 'CRM', descricao: 'Sistema de CRM' },
                { nome: 'Relat√≥rios comerciais', descricao: 'Relat√≥rios de vendas' }
            ]
        };

        let totalAssuntos = 0;

        for (const setor of setores) {
            const assuntos = assuntosPorSetor[setor.nome] || [];
            
            if (assuntos.length > 0) {
                console.log(`üìù Adicionando ${assuntos.length} assuntos para o setor: ${setor.nome}`);
                
                for (const assunto of assuntos) {
                    // Verificar se o assunto j√° existe
                    const [existing] = await sequelize.query(`
                        SELECT id FROM "Assuntos" 
                        WHERE nome = ? AND "setorId" = ?
                    `, {
                        replacements: [assunto.nome, setor.id]
                    });

                    if (existing.length === 0) {
                        await sequelize.query(`
                            INSERT INTO "Assuntos" (nome, descricao, "setorId", ativo, "createdAt", "updatedAt")
                            VALUES (?, ?, ?, true, NOW(), NOW())
                        `, {
                            replacements: [assunto.nome, assunto.descricao, setor.id]
                        });
                        totalAssuntos++;
                    } else {
                        console.log(`   ‚ö†Ô∏è  Assunto "${assunto.nome}" j√° existe no setor ${setor.nome}`);
                    }
                }
            } else {
                console.log(`‚ö†Ô∏è  Nenhum assunto definido para o setor: ${setor.nome}`);
            }
        }

        console.log('üéâ Assuntos de exemplo adicionados com sucesso!');
        console.log(`üìä Total de assuntos criados: ${totalAssuntos}`);

    } catch (error) {
        console.error('‚ùå Erro ao adicionar assuntos:', error.message);
        throw error;
    } finally {
        await sequelize.close();
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    addSampleAssuntos()
        .then(() => {
            console.log('‚úÖ Script executado com sucesso');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Erro ao executar script:', error);
            process.exit(1);
        });
}

module.exports = addSampleAssuntos;
